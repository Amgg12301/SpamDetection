{"version":3,"sources":["Result.js","TextBox.js","App.js","reportWebVitals.js","index.js"],"names":["Result","props","message","emoji","type","className","TextBox","useState","input","setInput","setType","score","setScore","Form","onSubmit","event","preventDefault","alert","console","log","fetch","method","cache","headers","body","JSON","stringify","then","res","json","data","result","accuracy_score","Group","controlId","Control","as","rows","value","placeholder","onChange","target","Button","size","variant","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAuBeA,MArBf,SAAgBC,GACZ,IAAIC,EAAU,oCACVC,EAAQ,eAUZ,MARkB,QAAfF,EAAMG,MACLF,EAAU,4BACVC,EAAQ,gBACY,SAAfF,EAAMG,OACXF,EAAU,oCACVC,EAAQ,gBAIR,sBAAKE,UAAU,SAAf,UACI,+DACA,mBAAGA,UAAU,QAAb,SAAsBF,IACtB,mBAAGE,UAAU,UAAb,SAAwBH,Q,gBC6CrBI,MA3Df,WAAmB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEUF,mBAAS,IAFnB,mBAEPH,EAFO,KAEDM,EAFC,OAGYH,mBAAS,mBAHrB,mBAGPI,EAHO,KAGAC,EAHA,KA+Bd,OACI,sBAAKP,UAAU,QAAf,UACI,qBAAKA,UAAU,UAAf,SACI,eAACQ,EAAA,EAAD,CAAMC,SAvBE,SAACC,GACjBA,EAAMC,iBANM,KAAVR,GACES,MAAM,gCAOVC,QAAQC,IAAIX,GACZY,MAAM,WAAY,CACdC,OAAQ,OACRC,MAAO,WACPC,QAAS,CACL,aAAe,oBAEnBC,KAAMC,KAAKC,UAAUlB,KAEtBmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJZ,QAAQC,IAAIW,GACZpB,EAAQoB,EAAKC,QACbnB,EAASkB,EAAKE,oBAOV,UACI,eAACnB,EAAA,EAAKoB,MAAN,CAAYC,UAAU,+BAAtB,UACI,qDACA,cAACrB,EAAA,EAAKsB,QAAN,CACIC,GAAG,WACHC,KAAM,GACNC,MAAO9B,EACP+B,YAAY,uBACZC,SAAU,SAAAzB,GAAK,OAAIN,EAASM,EAAM0B,OAAOH,aAEjD,cAACI,EAAA,EAAD,CAAQrC,UAAU,eAAesC,KAAK,KAAKC,QAAQ,UAAUxC,KAAK,SAAlE,gCAKR,qBAAKC,UAAY,SAAjB,SACI,cAAC,EAAD,CAAQD,KAAMA,MAElB,qBAAKC,UAAU,QAAf,SACI,2EAA8CM,EAA9C,aC1CDkC,MAXf,WACE,OACE,sBAAKxC,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SACE,uEAEF,cAAC,EAAD,QCESyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.74514163.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Result(props){\n    let message = 'Input a message to see the magic!';\n    let emoji = 'ðŸ¤”';\n\n    if(props.type === 'ham'){\n        message = 'This is HAM aka not spam!';\n        emoji = 'ðŸ¤©';\n    }else if(props.type === 'spam'){\n        message = 'This is SPAM, please be careful!!';\n        emoji = 'ðŸ˜¡';\n    }\n\n    return (\n        <div className=\"result\">\n            <h2>What type of message is this?</h2>\n            <p className=\"emoji\">{emoji}</p>\n            <p className=\"message\">{message}</p>\n        </div>\n    );\n}\n\nexport default Result;","import React, { useState } from \"react\";\nimport Result from './Result.js';\nimport { Form, Button} from 'react-bootstrap';\n\nfunction TextBox(){\n    const [input, setInput] = useState('');\n    const [type, setType] = useState('');\n    const [score, setScore] = useState(94.67703349282297);\n\n   const validateInput = () => {\n       if(input === ''){\n            alert('Must be a non-empty message!');\n       }\n   }\n\n   const handleSubmit = (event) => {\n        event.preventDefault();\n        validateInput();\n        console.log(input);\n        fetch(\"/results\", {\n            method: \"POST\",\n            cache: \"no-cache\",\n            headers: {\n                \"content_type\":\"application/json\",\n            },\n            body: JSON.stringify(input)\n          })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data);\n            setType(data.result);\n            setScore(data.accuracy_score);\n        });\n    }\n\n    return (\n        <div className=\"inner\">\n            <div className=\"textbox\">\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                        <h2>Enter your message:</h2>\n                        <Form.Control \n                            as=\"textarea\"\n                            rows={20}\n                            value={input} \n                            placeholder=\"Start typing here...\"\n                            onChange={event => setInput(event.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Button className=\"submitButton\" size=\"lg\" variant=\"primary\" type=\"submit\">\n                        Check it out!\n                    </Button>\n                </Form>\n            </div>\n            <div className = \"result\">\n                <Result type={type} />\n            </div>\n            <div className=\"score\">\n                <p>Spam Classification Model Accuracy Score: {score}%</p>\n            </div>\n        </div>\n    );\n}\n\nexport default TextBox;","import './App.css';\nimport React from 'react';\nimport TextBox from './TextBox.js';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>Let's Fight Spam Messages Together!</h1>\n      </div>\n      <TextBox />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}